// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/scaler/client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gojenkins "github.com/bndr/gojenkins"
	client "github.com/bringg/jenkins-autoscaler/pkg/scaler/client"
	gomock "github.com/golang/mock/gomock"
)

// MockJenkinser is a mock of Jenkinser interface.
type MockJenkinser struct {
	ctrl     *gomock.Controller
	recorder *MockJenkinserMockRecorder
}

// MockJenkinserMockRecorder is the mock recorder for MockJenkinser.
type MockJenkinserMockRecorder struct {
	mock *MockJenkinser
}

// NewMockJenkinser creates a new mock instance.
func NewMockJenkinser(ctrl *gomock.Controller) *MockJenkinser {
	mock := &MockJenkinser{ctrl: ctrl}
	mock.recorder = &MockJenkinserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJenkinser) EXPECT() *MockJenkinserMockRecorder {
	return m.recorder
}

// DeleteNode mocks base method.
func (m *MockJenkinser) DeleteNode(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockJenkinserMockRecorder) DeleteNode(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockJenkinser)(nil).DeleteNode), ctx, name)
}

// GetAllNodes mocks base method.
func (m *MockJenkinser) GetAllNodes(ctx context.Context) (client.Nodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNodes", ctx)
	ret0, _ := ret[0].(client.Nodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNodes indicates an expected call of GetAllNodes.
func (mr *MockJenkinserMockRecorder) GetAllNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNodes", reflect.TypeOf((*MockJenkinser)(nil).GetAllNodes), ctx)
}

// GetCurrentUsage mocks base method.
func (m *MockJenkinser) GetCurrentUsage(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUsage", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUsage indicates an expected call of GetCurrentUsage.
func (mr *MockJenkinserMockRecorder) GetCurrentUsage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUsage", reflect.TypeOf((*MockJenkinser)(nil).GetCurrentUsage), ctx)
}

// GetNode mocks base method.
func (m *MockJenkinser) GetNode(ctx context.Context, name string) (*gojenkins.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, name)
	ret0, _ := ret[0].(*gojenkins.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockJenkinserMockRecorder) GetNode(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockJenkinser)(nil).GetNode), ctx, name)
}
